import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.undo.UndoManager;

import javax.swing.*;
import java.awt.event.*;

public class Note_Project {
	static void Sleep(int seconds) {
        try {
            Thread.sleep(seconds);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
	}
	static void SaveStringtoNote(String text, String path) {
		try {
	       FileWriter writer = new FileWriter(path);
	       writer.write(text);
	       writer.close();
	       //System.out.println(text);
		}catch (IOException e) {
			System.out.printf("SaveErrorCode: %s", e.getMessage());
		}
	}
	
	public static String ReadStringfromNote(String filePath) {
        StringBuilder content = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                content.append(line).append("\n"); // Append each line to the StringBuilder
            }
        } catch (IOException e) {

			System.out.printf("ReadErrorCode: %s", e.getMessage());
        }
        //System.out.println(content.toString());
        return content.toString();
    }
	private static void Undo(JTextArea textArea) {
	    UndoManager undoManager = new UndoManager();
	    textArea.getDocument().addUndoableEditListener(undoManager);
	    
	    KeyStroke undoKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
	    textArea.getInputMap().put(undoKeyStroke, "Undo");
	    
	    textArea.getActionMap().put("Undo", new AbstractAction() {
	        public void actionPerformed(ActionEvent e) {
	            if (undoManager.canUndo()) {
	                undoManager.undo();
	            }
	        }
	    });
	}

	

	static int page = 1;
	static int ZoomSet = 0;
	
    public static void main(String[] args) {
    	
        JFrame frame = new JFrame("Note Project");
        JTextArea textArea = new JTextArea();
        JScrollPane scrollPane = new JScrollPane(textArea);

        int FontSize = 20;
        textArea.setFont(new Font("Tahoma", Font.PLAIN, FontSize));

        
        JMenu editMenu = new JMenu("Seting");
        JMenuItem ExitToLogin = new JMenuItem("Exit To Login");
        editMenu.add(ExitToLogin);

        JMenu Zoom = new JMenu("View");
        JMenuItem ZoomIn = new JMenuItem("Zoom In");
        JMenuItem ZoomOut = new JMenuItem("Zoom Out");
        JMenuItem DefaultZoom = new JMenuItem("Default Zoom");
        Zoom.add(ZoomIn);
        Zoom.add(ZoomOut);
        Zoom.add(DefaultZoom);

        JMenuBar menuBar = new JMenuBar();
        menuBar.add(editMenu);
        menuBar.add(Zoom);

        frame.setJMenuBar(menuBar);
        
        frame.add(scrollPane);
        frame.setSize(800, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(false);
        

	    UndoManager undoManager = new UndoManager();
	    textArea.getDocument().addUndoableEditListener(undoManager);
        
        while(true) {
        	try {
        		String userInput = JOptionPane.showInputDialog(null, "Username:", "Login", JOptionPane.PLAIN_MESSAGE);
        		String PathFile = String.format("C:\\Note\\%s.txt", userInput);
        		File file = new File(PathFile);
        		if (file.exists()) {
        			String Read = ReadStringfromNote(PathFile);
        			textArea.setText(Read);
        			
        			frame.setVisible(true);
        			
        			//Undo(textArea);
        			

        			textArea.addKeyListener(new KeyAdapter() {
        	            @Override
        	            public void keyPressed(KeyEvent e) {
        	                if (e.getKeyCode() == KeyEvent.VK_Z && ((e.getModifiers() & Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()) != 0)) {
        	                    if (undoManager.canUndo()) {
        	                        undoManager.undo();
        	                    }
        	                }
        	            }
        	        });

        			
        			ExitToLogin.addActionListener(e -> page = 0);

        			ZoomIn.addActionListener(e -> ZoomSet = 1);
        			ZoomOut.addActionListener(e -> ZoomSet = 2);
        			DefaultZoom.addActionListener(e -> ZoomSet = 3);
        			
        			while(true) {
        				String Text = textArea.getText();
        				SaveStringtoNote(Text, PathFile);
        				
        				if(ZoomSet == 1) {
        			        textArea.setFont(new Font("Tahoma", Font.PLAIN, FontSize++));
        			        ZoomSet = 0;
        				}else if(ZoomSet == 2) {
        			        textArea.setFont(new Font("Tahoma", Font.PLAIN, FontSize--));
        			        ZoomSet = 0;
        				}else if(ZoomSet == 3) {
        			        textArea.setFont(new Font("Tahoma", Font.PLAIN, FontSize = 20));
        			        ZoomSet = 0;
        				}
        				
        				if(page == 0) {
        					frame.setVisible(false);
        					page = 1;
        					break;
        				}
        				

        				
        				Sleep(500);
        			}
        		}else if(userInput.equals(null)){
        			System.exit(0);
        		}else {
        			while(true) {
        				try {
        					String NewUser = JOptionPane.showInputDialog(null, "New Username:", "NewUser", JOptionPane.PLAIN_MESSAGE);
        					PathFile = String.format("C:\\Note\\%s.txt", NewUser);
        					file = new File(PathFile);
        					if(NewUser.equals("") || file.exists()) {
        						JOptionPane.showMessageDialog(null, "This can't be used.", "Error", 0);
        					}else {
        						File createdFolder = new File("C:\\Note");
        						if (!createdFolder.exists()) {
        							boolean created = createdFolder.mkdir();
        							if (created) {
        								System.out.println("Folder created successfully.");
        							} else {
        								System.out.println("Failed to create folder.");
        								System.exit(0);
        							}
        						}
        						FileWriter newFile = new FileWriter(PathFile);
        						newFile.close();
        						break;
        					}
        				} catch (Exception e) {
        					break;
        				}
        			}
        		}
        	} catch (Exception e) {
        		System.exit(0);
        	}
        }
    }
}
